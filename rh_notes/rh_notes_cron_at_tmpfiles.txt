-scheduling one-time tasks with "at"

-"atd" system daemon:
    -in the "at" package - typically installed/enabled automatically
    -provides 26 queues, a-z with jobs in alphabetically later queues getting lower priority
    -jobs are spooled at: /var/spool/at/

-scheduling jobs:
    * typically start with a time, followed by optional date or number of days in future
        # at <TIMESPEC>

    * TIMESPEC examples:
        # at now +5 min
        # at teatime tomorrow       // teatime is 4pm
        # at noon +4 days
        # 5pm august 3 2016
        # 3:00 12/15/2019           // 3am on December 15, 2019

-inspecting jobs:
    # atq                           // or alternatively, at -l

-inspect commands that will run for a job:
    # at -c <JOBNUMBER>

-remove jobs:
    # atremove <JOBNUMBER>

-examples:
    # at now +1 hour < /home/user/myscript.sh
    # echo "date > ~/myjob.txt" | at now +2 min

    # at -q b teatime tomorrow      
    at> touch /home/user/myfile.txt
    at> Ctrl-D

    # at -c 2                       // inspect command for job #2
    # atrm 2                        // remove job #2

-securing at:
    /etc/at.allow
    /etc/at.deny





-----CROND-----
-installed using "cronie" package
-commands that output to the console will attempt to email user
-see /etc/crontab for format
-man 5 crontab (further explanation for time & date fields)

    # systemctl status crond        // verify crond is running
    
    # crontab -l                    // list the jobs for the current user
    # crontab -r                    // remove ALL jobs for the current user
    # crontab -e                    // edit jobs for the current user
    # crontab <FILENAME>            // remove all jobs; replace w/ jobs read from FILENAME (or stdin if blank)
    # crontab -u <USERNAME>         // root can manage jobs for another user

-crontab job format
    * always use full paths
    * environment variables can be declared (NAME=value)
        
        # Example of job definition:
        # .---------------- minute (0 - 59)
        # |  .------------- hour (0 - 23)
        # |  |  .---------- day of month (1 - 31)
        # |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...
        # |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat
        # |  |  |  |  |
        # *  *  *  *  * user-name  command to be executed
     
     * when "Day-of-Month" and "Day-of-Week" are both specified, cmd executed when EITHER these 2 fields match
        ** example: can be used to run cmd on the 15th of every month AND on every Friday

    * syntax:
        - * for "Don't Care/Always"
        - number specifies number of minutes, hours, a date, or a weekday
        - x-y for a range (x, y inclusive)
        - x,y for lists (e.g., 5,10-13 in the minutes column -> run 5 in past the hour, 10, 11, 12 minutes, etc.)
        - unescaped % is treated as newline

-user examples:
    0       9       2       2       *   [CMD]   // exactly at 9am on Feb 2nd every year
    */7     9-17    *       Jul     5   [CMD]   // every 7 minutes bet 9am and 5pm every friday in July
    0       9       *       *       1-5 [CMD]   // every workday (mon-fri) at 9am
    58      23      *       *       1-5 [CMD]   // every workday at 2 minutes before midnight

-system-level cronjobs:
   * not defined using crontab, but configured in a set of configuration files
   * contains extra field between "Day-of-Week" and Command (specifies user under which job should run)
   * defined in two locations:
        /etc/crontab
        /etc/cron.d/    (can create cron config file directly in this directory)

-pre-defined system-level jobs - anacron (helper service):
    * /etc/cron.{hourly,daily,weekly,monthly}/  // directory contains executable scripts (chmod +x)
    * "run-parts" command executes pre-defined system jobs
    * /etc/cron.d/0hourly
        - run-parts --> /etc/cron.d/hourly/*
    * /etc/anacrontab:
        - specifies random delay and other settings
        - run-parts --> /etc/cron.d/{daily,weekly,monthly}/*
