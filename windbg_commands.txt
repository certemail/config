--- STEPPING -----------------------------------------------------
F8          step-into
F10         step-over
Shift-F11   step-out

--- SYMBOLS ---
set _NT_SYMBOL_PATH
!sym noisy                                                                  // more info on retrieval

- ways to set symbol path:
    _NT_SYMBOL_PATH                                                         // environment variable
    .sympath SRV*C:\symbols\*http://msdl.microsoft.com/download/symbols     //symbol path - store in C:\symbols
   
- download symbols from cmd line for a specific DLL:
    symchk.exe "C:\Windows\system32\kernel32.dll" 
        /s SRV*C:\symbols\*http://msdl.microsoft.com/download/symbols

.reload /f                                                                  // reload symbols

--- BREAKPOINTS --------------------------------------------------------
bp $exentry                             // break on entry point
bl                                      // list breakpoints
.bpcmds                                 // list commands used to set current breakpoints 
bc [NUM]                                // clear break point
bd [NUM]                                // disable breakpoint
bm ws2_32!*                             // can use wild card to set multiple breakpoints

bp MyDll!MyFunc "da poi(esp+4); g       // dereference 2nd pointer on stack

bp kernel32!GetProcAddress ".printf \"GETPROCADDRESS=%ma\\n\", poi(esp+8); g"
bp kernel32!WriteFile ".printf \"Dumping file contents from 0x%p as UNICDE: %mu\", poi(esp+0x8);.echo;g"
printf /D "<b> this is bolded </b>"

--- SEARCH MEMORY -----------------------------------------------------------
s -a START END http                     // search memory for ASCII string "http" in start end region
s -a 0x12345 L100 http                  // start search at address 0x12345 and end 100 bytes
s -a 0x0 L?0x7FFFFFFF http              // search all of user space for ACSII string
s -u 0x0 L?0x7FFFFFFF http              // search all of user space for UNICODE string

// dump all strings with max length of 100 containing "somestring"
.foreach(OBJ {s -[1]a 0x0 L?0x7FFFFFFF "somestring"}){da /c 0n100 ${OBJ}}

--- DISPLAY MEMORY --------------------------------------------------------
dd poi(0x12345)                         // dereference what address 0x12345 points to
dd poi(esp)                             // dereference what is on the top of the stack
da /c100 0x12345                        // print ASCII string with 100 characters on a line (easy to copy/paste)
dd /c1 0x400123 L5                      // display in one column the first 5 DWORDS

--- EXCEPTIONS --------------------------------------------------------
sx                                      // list currently set exceptions
sxe ld [DLL_NAME]                       // break on module load (dont include ".dll")
sxe -c "kv;!analyze -v;g;" e06d7363     // more detailed exception analysis
sxi ld                                  // hide module loading messags
sxr                                     // reset all sx* exceptions to default

sxe -c "k;g;" e06d7363                  // configure exceptions such that we break on error e06d7363
                                        // execute the command k;g; (print traceback in that thread
                                        // and then continue

--- LOG FILES --------------------------------------------------------
.logopen [PATH_TO_LOG_FILE]             // open log 
.logclose                               // close log

--- FORMAT NUMBERS --------------------------------------------------------
? 0n123                                 // display "123" as hexadecimal
? 0x123                                 // display "0x123" as decimal
.formats [NUM]
.formats 0n15                           // display all formats (binary, ascii, etc.) for decimal 15
.formats 0x3c                   

--- OTHER COMMANDS --------------------------------------------------------
.restart                                // restart exe (only if launched by WinDbg originally)

!address                                // memory map
!address 0x77112233                     // information on specific memory addr
!dh 0xfd0000                            // PE header information
lm                                      // list loaded modules
x kernel32!Virtual*                     // browse symbols for module using wildcard
k                                       // view call stack
!findstack kernel32                     // find string "kernel32" in all threads' stacks

dt -r ntdll!_IMAGE_NT_HEADERS           // show structure fields for symbol

eb $peb+0x2 0x0                         // edit byte at PEB offset of 2 bytes and set to 0 (thwart anti-debug)

.writemem C:\out.bin START END          // write out to disk memory from start to end address 
                                           use !address to get end range of memory segment

--- SCRIPT FILES -----------------------------------------------------------
// run script WITHOUT contents concatenated into a single command block
windbg -W myworkspace -o -c "$<C:\Path\To\myscriptfile.txt TARGET.EXE

// run script cmds literally, replace all carriage returns with semicolons,
//  and execute the resulting text as a single command block
windbg -W myworkspace -o -c "$$><C:\Path\To\myscriptfile.txt TARGET.EXE

// enable breakpoints after a certain breakpoint has been reached
bp 0x12345 "be 1;be 2;be 3;g"
$$
bp SomeFunc1 ".printf ...g;"
bp SomeFunc2 ".printf ...g;"
bp SomeFunc3 ".printf ...g;"
$$
$$ disable breakpoints initially until 0x12345 code is reached, then enable them
bd 1;bd 2; bd 3; 
g
